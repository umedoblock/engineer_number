# EngineerNumber
# Copyright (C) 2013-2017 梅濁酒(umedoblock)
# 梅濁酒(umedoblock) umedoblock@gmail.com, 2013-2017
#
msgid ""
msgstr ""
"Project-Id-Version: 1.0.5\n"
"POT-Creation-Date: 2013-02-17 08:02+JST\n"
"PO-Revision-Date: 2017-09-30 14:35+0900\n"
"Last-Translator: 梅濁酒(umedoblock) umedoblock@gmail.com\n"
"Language-Team: Japanese umedoblock@gmail.com\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: pygettext.py 1.5\n"


#, docstring
msgid ""
"attr.__doc__ を gettext() にて翻訳する。\n"
"\n"
"    attr() として attr を呼び出し可能であれば、\n"
"    attr に結び付く __doc__ 属性を msgid とし、\n"
"    以下を実行する。\n"
"    msgstr = gettext(msgid)\n"
"    実行後、attr に結びつく __doc__ 属性の値を、msgstr で上書きする。\n"
"\n"
"    attr() として attr を呼び出し可能でない場合、何も実行しない。\n"
"    "
msgstr ""

#, docstring
msgid ""
"EngineerNumber class は、SI接頭辞の変換・異なるSI接頭辞同士の\n"
"    計算を容易にします。\n"
"\n"
"    以下、使うための手順を簡単に紹介します。\n"
"    >>> from engineer_number import EngineerNumber\n"
"\n"
"    KILO, MEGA, ...等々の SI 接頭辞名を使わない場合、\n"
"    以下の行は必要ありません。\n"
"    >>> from engineer_number.constants import *\n"
"\n"
"    以下の、No.1, 2, 3 では、 10 * 1000 の値を得る方法と、\n"
"    SI 接頭辞変換の方法を説明します。\n"
"\n"
"    No.1: 有効値の文字列と、SI 接頭辞を連結し、\n"
"    10 kilo の値を得る方法です。\n"
"    >>> r1 = EngineerNumber(\"10k\")       # No.1\n"
"    >>> r1\n"
"    EngineerNumber(\"10.000k\")\n"
"\n"
"    10 kilo を Mega で計算し、SI 接頭辞変換を行います。\n"
"    >>> r1[\"M\"]\n"
"    \"0.010M\"\n"
"\n"
"    No.2: 有効値と、SI 接頭辞名で 10 kilo の値を得る方法です。\n"
"    >>> r2 = EngineerNumber(\"10k\")       # No.3\n"
"    >>> r2 = EngineerNumber(10, 3)       # No.3\n"
"    >>> r2 = EngineerNumber(10, KILO)    # No.2\n"
"    >>> r2 = EngineerNumber(\"10\", KILO)  # No.2\n"
"    >>> r2\n"
"    EngineerNumber(\"10.000k\")\n"
"\n"
"    10 kilo に SI 接頭辞変換を行い、数値に変換します。\n"
"    10 の乗数が 0 の場合、\n"
"    空文字列を SI 接頭辞としていることに注意して下さい。\n"
"    >>> r2[\"\"]\n"
"    \"10000.000\"\n"
"\n"
"    No.3: 有効値と 10 の乗数で 10 kilo の値を得る方法です。\n"
"    抵抗のカラーコードから抵抗値を求める事を想定しています。\n"
"    >>> r3 = EngineerNumber(\"10\", 3)     # No.3\n"
"    >>> r3\n"
"    EngineerNumber(\"10.000k\")\n"
"\n"
"    10 kilo を kilo で計算する、なんちゃって SI 接頭辞変換を行います。\n"
"    自分でも必要ないとは思うんですけれど、流れ上、書きました。\n"
"    >>> r3[\"k\"]\n"
"    \"10.000k\"\n"
"\n"
"    以下の、No.4, 5 では、コンデンサ上の表示から、\n"
"    コンデンサの容量値を求める方法を紹介します。\n"
"    \"p\" を有効数値の後に付けていることに注意して下さい。\n"
"\n"
"    No.4: コンデンサの表示 \"104\" から容量値を求めます。\n"
"    >>> c4 = EngineerNumber(\"10p\", 4)    # No.4\n"
"    >>> c4\n"
"    EngineerNumber(\"100.000n\")\n"
"\n"
"    マイクロ・ナノ・ピコを計算する時など、\n"
"    よく頭がこんがらがりますよね。\n"
"    >>> c4[\"u\"]\n"
"    \"0.100u\"\n"
"\n"
"    No.5: コンデンサの表示 \"202\" から容量値を求めます。\n"
"    >>> c5 = EngineerNumber(\"20p\", 2)    # No.5\n"
"    >>> c5\n"
"    EngineerNumber(\"2.000n\")\n"
"    >>> c5[\"p\"]\n"
"    \"2000.000p\"\n"
"\n"
"    ここだけの話：\n"
"    マイクロ・ナノ・ピコの変換が大変でややこしくて、\n"
"    よく間違えて困るので、この EngineerNumber を作成しました。\n"
"    抵抗のカラーコードにも使えると分かった時には、\n"
"    本当に便利だなー。と自分でも思いました\n"
"\n"
"    使用例を、もう少し知りたい方は \"README.txt\" をご覧下さい。\n"
"\n"
"    EngineerNumber.num 属性は、数値型 object です。\n"
"    EngineerNumber class に、__add__() 等の method を定義し、\n"
"    演算の対象を EngineerNumber.num とすることで、\n"
"    EngineerNumber instance は、数値型 object 互換になっています。\n"
"    数値型 object 互換にする方法は、\n"
"    PEP 3141, numbers class 等をご覧下さい。\n"
"\n"
"    SI 接頭辞として用意しているのは、以下の通りです。\n"
"    (\"Y\", YOTTA),\n"
"    (\"Z\", ZETTA),\n"
"    (\"E\", EXA),\n"
"    (\"P\", PETA),\n"
"    (\"T\", TERA),\n"
"    (\"G\", GIGA),\n"
"    (\"M\", MEGA),\n"
"    (\"k\", KILO),\n"
"    (\"h\", HECTO),\n"
"    (\"da\", DECA),\n"
"     (\"\", ONE),\n"
"    (\"d\", DECI),\n"
"    (\"c\", CENTI),\n"
"    (\"m\", MILLI),\n"
"    (\"u\", MICRO),\n"
"    (\"n\", NANO),\n"
"    (\"p\", PICO),\n"
"    (\"f\", FEMTO),\n"
"    (\"a\", ATTO),\n"
"    (\"z\", ZEPTO),\n"
"    (\"y\", YOCTO),\n"
"    "
msgstr ""

#, docstring
msgid "有効数字の数値と 10 の乗数値を、tuple に詰めて返します。"
msgstr ""

msgid ""
"\"K\" を SI 接頭辞の記号として使用することは出来ません。\n"
"kilo を表現したい場合、 \"K\" ではなく、小文字の \"k\" をお使い下さい。\n"
"なぜならば、\"K\" は、Kelvin 温度を表現するための単位記号だからです。"
msgstr ""

#, docstring
msgid "SI 接頭辞に対応する、10 の乗数値を返します。"
msgstr ""

msgid "SI 接頭辞の記号は、次のいずれかでなければなりません。{}"
msgstr ""

#, docstring
msgid ""
"有効数値と 10 の乗数値を指定します。\n"
"        value を、二つの方法により指定できます。\n"
"        一つ目は、有効数値を整数値、浮動小数値として指定する方法です。\n"
"        二つ目は、有効数値の文字列と SI 接頭辞を連結し、文字列として\n"
"        指定する方法です。\n"
"\n"
"        exponent10 は、無指定であれば、0 として取り扱います。\n"
"        以下の計算式により、value, exponent10 の値から、\n"
"        EngineerNumber.num 属性の値を計算します。\n"
"        num = value * 10 ** exponent10\n"
"\n"
"        つまり、exponent10 を指定しなければ、\n"
"        num 属性の値として、value の値を、そのまま代入することになります。\n"
"        num = value * 10 ** 0 = value * 1 = value\n"
"        num 属性の値の範囲は、 -24 <= num <= 24 であり、かつ、\n"
"        num 属性の値は、3 の整数倍となります。\n"
"\n"
"        詳しい使い方は、EngineerNumber class の docstring をご覧下さい。\n"
"        例 1 〜 5 等が分かりやすいかと思います。\n"
"        更なる情報は、少しだけ、\"README.txt\" に書いています。\n"
"        "
msgstr ""

#, docstring
msgid "self[si_prefix] として、SI 接頭辞変換を行う。"
msgstr ""

#, docstring
msgid "SI 接頭辞により有効数字を変換。"
msgstr ""

#, docstring
msgid ""
"EngineerNumber.num の値から、_num, _exponent10 を正規化する。\n"
"        num, _num, _exponent10 の計算方法は、簡単に以下の通り。\n"
"\n"
"        _exponent10 = log10(num) // group_of_digits(=3)\n"
"        _num = num // (10 ** _exponent10)\n"
"        num =(大体同じ、approximately equal to) _num * 10 ** _exponent10\n"
"\n"
"        _exponent10 は SI 接頭辞と連動するため、\n"
"        group_of_digits(=3) の整数倍になっていることに注意。"
msgstr ""

#, docstring
msgid "math.sqrt() の help を読んで。"
msgstr ""

#, docstring
msgid ""
"主に debug 用。\n"
"        github への移行を期に，非公開とした。"
msgstr ""

#, docstring
msgid "object.__add__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__sub__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__mul__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__floordiv__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__truediv__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__mod__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__divmod__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__pow__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__int__() の help を読んで。"
msgstr ""

msgid "0 < abs(number(={})) < 1 を満たす数字を int に変換しようとしました。"
msgstr ""

#, docstring
msgid "object.__float__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__radd__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__rsub__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__rmul__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__rfloordiv__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__rtruediv__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__rmod__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__rdivmod__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__rpow__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__eq__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__ne__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__gt__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__ge__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__lt__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__le__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__repr__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__str__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__abs__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__pos__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__neg__() の help を読んで。"
msgstr ""

#, docstring
msgid "object.__round__() の help を読んで。"
msgstr ""

#, docstring
msgid "math.__ceil__() の help を読んで。"
msgstr ""

#, docstring
msgid "math.floor() の help を読んで。"
msgstr ""

#, docstring
msgid "math.trunc() の help を読んで。"
msgstr ""

msgid "look for optimized Hz."
msgstr ""

